# Generated by Django 5.0.9 on 2024-10-25 19:49

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dcim', '0191_module_bay_rebuild'),
        ('extras', '0121_customfield_related_object_filter'),
        ('ipam', '0070_vlangroup_vlan_id_ranges'),
    ]

    operations = [
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('image', models.FileField(blank=True, null=True, upload_to='test/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['bin'])])),
                ('filename', models.CharField(blank=True, max_length=256)),
                ('md5sum', models.CharField(blank=True, max_length=36)),
                ('md5sum_calculated', models.CharField(blank=True, max_length=36)),
                ('version', models.CharField(blank=True, max_length=32)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('comments', models.TextField(blank=True)),
                ('status', models.CharField(default='unkown', max_length=255)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'image',
                'verbose_name_plural': 'images',
                'ordering': ['filename', 'version'],
            },
        ),
        migrations.CreateModel(
            name='GoldenImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('comments', models.TextField(blank=True)),
                ('device_types', models.ManyToManyField(blank=True, related_name='+', to='dcim.devicetype')),
                ('locations', models.ManyToManyField(blank=True, related_name='+', to='dcim.location')),
                ('platforms', models.ManyToManyField(blank=True, related_name='+', to='dcim.platform')),
                ('regions', models.ManyToManyField(blank=True, related_name='+', to='dcim.region')),
                ('roles', models.ManyToManyField(blank=True, related_name='+', to='dcim.devicerole')),
                ('site_groups', models.ManyToManyField(blank=True, related_name='+', to='dcim.sitegroup')),
                ('sites', models.ManyToManyField(blank=True, related_name='+', to='dcim.site')),
                ('tags', models.ManyToManyField(blank=True, related_name='+', to='extras.tag')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='netbox_os_manager.image')),
            ],
            options={
                'verbose_name': 'golden image',
                'verbose_name_plural': 'golden images',
                'ordering': ['name', 'image'],
            },
        ),
        migrations.CreateModel(
            name='ImageDistributionServer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('download_method', models.CharField(default='http', max_length=255)),
                ('custom_port', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None)),
                ('ip', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='ipam.ipaddress')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SettingsDeviceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('device_remote_filesystem', models.CharField(default='bootflash:', max_length=255)),
                ('device_upgrade_mode', models.CharField(default='INSTALL_MODE', max_length=255)),
                ('max_attempts_after_reload', models.PositiveSmallIntegerField(default=15)),
                ('seconds_between_attemps_after_reload', models.PositiveSmallIntegerField(default=60)),
                ('minutes_image_add_timeout', models.PositiveSmallIntegerField(default=10)),
                ('minutes_image_activation_timeout', models.PositiveSmallIntegerField(default=20)),
                ('device_type', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dcim.devicetype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
